group = "dev.jonathanvegasp.result_channel"
version = "1.0.0"

buildscript {
    ext.kotlin_version = "2.1.0"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.7.3")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "dev.jonathanvegasp.result_channel"

    compileSdk = 35
    ndkVersion = "27.2.12479018"

    externalNativeBuild {
        cmake {
            path = "../src/CMakeLists.txt"
        }
    }

    buildFeatures {
        prefabPublishing true
    }

    prefab {
        create("result_channel") {
            headers "../src/include"
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_EXE_LINKER_FLAGS=-Wl,--gc-sections -Wl,--strip-all -Wl,--as-needed -Wl,-z,relro,-z,now -Wl,--no-undefined -Wl,--hash-style=gnu -Wl,--build-id=none -Wl,--sort-common -Wl,--sort-section=name"


                cFlags "-O2",
                        "-flto",
                        "-ffunction-sections",
                        "-fdata-sections",
                        "-fvisibility=hidden",
                        "-DNDEBUG",
                        "-g0",
                        "-fno-unwind-tables",
                        "-fno-asynchronous-unwind-tables",
                        "-fno-ident"
            }
        }
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.19.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

tasks.configureEach { task ->
    def dir = file("${projectDir}/.cxx")

    if (!dir.exists()) {
        task.outputs.upToDateWhen { false }
    }
}

tasks.named('clean') {
    delete "${projectDir}/.cxx"
}
